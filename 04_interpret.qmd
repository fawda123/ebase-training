---
lightbox: true

execute: 
  echo: true
---

# Interpreting Results {#sec-interpret}

## Discussion Outline

This discussion is your time to share some ideas about evaluating the results from EBASE.  We'll go through some live coding examples based on these ideas. Below are some examples and code to get us started. 

## Example 1: Piney Point

This example evaluates the effects of a large influx of inorganic nutrients into Tampa Bay from a legacy fertilizer processing.  

```{r}
#| eval: false
#| collapse: true
#| code-fold: true
library(tidyverse)
library(EBASE)
library(doParallel)
library(here)
library(patchwork)

# prep data -----------------------------------------------------------------------------------

url <- 'http://tampabay.loboviz.com/cgi-data/nph-data.cgi?node=82&min_date=20210701&max_date=20210801&y=salinity,temperature,oxygen,par,pressure&data_format=text'

lobo <- read.table(url, skip = 2, sep = '\t', header = T) |> 
  select(
    DateTimeStamp = date..EST.,
    DO_obs = dissolved.oxygen..mg.L.,
    Temp = temperature..C.,
    Sal = salinity..PSU.,
    PAR = PAR..uM.m.2.sec.,
    Tide = pressure..dBar.
  ) |> 
  mutate(
    DateTimeStamp = lubridate::ymd_hms(DateTimeStamp, tz = 'America/Jamaica'),
    PAR = PAR * 0.2175, 
    Tide = Tide + 2.4
  )

url <- 'https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?product=wind&application=NOS.COOPS.TAC.MET&begin_date=20210701&end_date=20210801&station=8726520&time_zone=LST&units=metric&format=CSV'

ports <- read.table(url, sep = ',', header = T) |> 
  select(
    DateTimeStamp = Date.Time,
    WSpd = Speed
  ) |> 
  mutate(
    DateTimeStamp = lubridate::ymd_hm(DateTimeStamp, tz = 'America/Jamaica')
  )

tbdat <- left_join(lobo, ports, by = 'DateTimeStamp')

# exploratory plots ---------------------------------------------------------------------------

toplo <- tbdat |> 
  pivot_longer(-DateTimeStamp) 

ggplot(tbdat, aes( x = DateTimeStamp)) +
  geom_line(aes(y = value), data = toplo) +
  facet_wrap(~name, scales = 'free_y', ncol = 1) +
  theme_minimal()

# run EBASE -----------------------------------------------------------------------------------

# setup parallel backend
ncores <- detectCores()
cl <- makeCluster(ncores - 2)
registerDoParallel(cl)

tbdatebase <- ebase(tbdat, interval = 3600, Z = tbdat$Tide, ndays = 1)

stopCluster(cl)

save(tbdatebase, file = here('data/tbdatebase.RData'))

# evaluate fit --------------------------------------------------------------------------------

load(file = here('data/tbdatebase.RData'))

fit_plot(tbdatebase)
fit_plot(tbdatebase, bygroup = T)
fit_plot(tbdatebase, bygroup = T, scatter = T)

table(tbdatebase$converge)
unique(tbdatebase$rsq)
range(tbdatebase$rsq)

credible_plot(tbdatebase)

# evaluate metabolism -------------------------------------------------------------------------

ebase_plot(tbdatebase)
ebase_plot(tbdatebase, instantaneous = F)

toplo <- tbdatebase |> 
  summarise(
    P = mean(P, na.rm = T),
    R = mean(R, na.rm = T), 
    .by = Date
  ) |> 
  mutate(
    NEM = P - R, 
    R = -R
  ) |> 
  pivot_longer(cols = c(P, R, NEM), names_to = 'Variable', values_to = 'Value')

p1 <- ggplot(toplo, aes(x = Date, y = Value, color = Variable)) +
  geom_hline(yintercept = 0) +
  geom_line() + 
  geom_point() + 
  theme_bw() + 
  labs(
    x = NULL, 
    y = expression(paste('mmol ', O [2], ' ', m^-2, d^-1)), 
    color = 'Estimate'
  )

p2 <- ggplot(tbdatebase, aes(x = DateTimeStamp, y = DO_obs)) +
  geom_line() + 
  theme_bw() + 
  labs(
    x = NULL, 
    y = 'DO (mg/L)'
  )

p1 + p2 + plot_layout(ncol = 1)
```

## Example 2: Apalachicola intersite comparisons

This examples compares metabolism at two locations in Apalachicola Bay.

```{r}
#| eval: false
#| collapse: true
#| code-fold: true
library(SWMPr)
library(plotly)
library(EBASE)
library(doParallel)
library(here)
library(tidyverse)

# data prep -----------------------------------------------------------------------------------

# weather
apaebmet <- import_local(path = 'data/367272.zip', station_code = 'apaebmet')
apaebmet <- qaqc(apaebmet, qaqc_keep = c('0', '1', '2', '3', '4', '5'))

# apadb
apadbwq <- import_local(path = 'data/367272.zip', station_code = 'apadbwq')
apadbwq <- qaqc(apadbwq, qaqc_keep = c('0', '1', '2', '3', '4', '5'))
apadb <- comb(apadbwq, apaebmet, timestep = 60, method = 'union')
apadb <- select(apadb,
                DateTimeStamp = datetimestamp,
                DO_obs = do_mgl,
                Temp = temp,
                Sal = sal,
                PAR = totpar,
                WSpd = wspd,
                Depth = depth
) |> 
  mutate(
    PAR = PAR * 1000 / 900 * 0.2175
  )

# apaeb
apaebwq <- import_local(path = 'data/367272.zip', station_code = 'apaebwq')
apaebwq <- qaqc(apaebwq, qaqc_keep = c('0', '1', '2', '3', '4', '5'))
apaebmet <- import_local(path = 'data/367272.zip', station_code = 'apaebmet')
apaebmet <- qaqc(apaebmet, qaqc_keep = c('0', '1', '2', '3', '4', '5'))
apaeb <- comb(apaebwq, apaebmet, timestep = 60, method = 'union')
apaeb <- select(apaeb,
                DateTimeStamp = datetimestamp,
                DO_obs = do_mgl,
                Temp = temp,
                Sal = sal,
                PAR = totpar,
                WSpd = wspd,
                Depth = depth
) |> 
  mutate(
    PAR = PAR * 1000 / 900 * 0.2175
  )

# exploratory plots ---------------------------------------------------------------------------

p1 <- plot_ly(apadb, x = ~DateTimeStamp, y = ~DO_obs, type = 'scatter', mode = 'lines')
p2 <- plot_ly(apaeb, x = ~DateTimeStamp, y = ~DO_obs, type = 'scatter', mode = 'lines')
p3 <- plot_ly(apaeb, x = ~DateTimeStamp, y = ~PAR, type = 'scatter', mode = 'lines')

subplot(p1, p2, p3, nrows = 3)

# run EBASE -----------------------------------------------------------------------------------

# this takes several hours!

ncores <- detectCores() - 2

apadbzval <- mean(apadb$Depth, na.rm = T)
apadbfull <- ebase_years(apadb, Z = apadbzval, interval = 3600, ncores = ncores, quiet = F)
save(apadbfull, file = 'data/apadbfull.RData')

apaebzval <- mean(apaeb$Depth, na.rm = T)
apaebfull <- ebase_years(apaeb, Z = apaebzval, interval = 3600, ncores = ncores, quiet = F)
save(apaebfull, file = 'data/apaebfull.RData')

# evaluate fit --------------------------------------------------------------------------------

load(file = here('data/apadbfull.RData'))
load(file = here('data/apaebfull.RData'))

table(apadbfull$converge)
range(apadbfull$rsq, na.rm = T)

lowrsq <- sort(unique(apadbfull$rsq), decreasing = F)[1:10]
fit_plot(apadbfull[which(apadbfull$rsq %in% lowrsq), ], bygroup = T)

credible_plot(apadbfull)

table(apaebfull$converge)
range(apaebfull$rsq, na.rm = T)

lowrsq <- sort(unique(apaebfull$rsq), decreasing = F)[1:10]
fit_plot(apaebfull[which(apaebfull$rsq %in% lowrsq), ], bygroup = T)

credible_plot(apaebfull)

# evaluate metabolism -------------------------------------------------------------------------

wxdat <- apadb |> 
  mutate(
    Date = as.Date(DateTimeStamp)
  ) |> 
  summarise(
    PAR = mean(PAR, na.rm = T),
    Sal = mean(Sal, na.rm = T),
    WSpd = mean(WSpd, na.rm = T), 
    Temp = mean(Temp, na.rm = T),
    .by = Date
  ) |> 
  filter(year(Date) == 2017)

apacmb <- list(
    `Dry Bar` = apadbfull,
    `East Bay` = apaebfull
  ) |> 
  enframe() |> 
  unnest('value') |> 
  filter(year(Date) == 2017) |>
  select(name, Date, P, R, a, b) |> 
  mutate(NEM = P - R) |> 
  summarise(
    a = mean(a, na.rm = T),
    b = mean(b, na.rm = T),
    NEM = mean(NEM, na.rm = T),
    R = mean(R, na.rm = T),
    P = mean(P, na.rm = T),
    .by = c(name, Date)
  ) |> 
  left_join(wxdat, by = 'Date')

ggplot(apacmb, aes(x = Date, y = NEM)) +
  geom_hline(yintercept = 0) +
  geom_line() + 
  geom_point() + 
  facet_wrap(~name, ncol = 1) +
  theme_bw() + 
  labs(
    x = NULL, 
    y = 'NEM'
  )

ggplot(apacmb, aes(x = WSpd, y = b)) + 
  geom_point() + 
  geom_smooth(method = 'lm', se = F, formula = y~x) +
  theme_bw() + 
  facet_wrap(~name)

ggplot(apacmb, aes(x = PAR, y = P)) + 
  geom_point() + 
  geom_smooth(method = 'lm', se = F, formula = y~x) +
  theme_bw() + 
  facet_wrap(~name)

ggplot(apacmb, aes(x = Temp, y = R)) + 
  geom_point() + 
  geom_smooth(method = 'lm', se = F, formula = y~x) +
  theme_bw() + 
  facet_wrap(~name)

ggplot(apacmb, aes(x = Sal, y = NEM)) +
  geom_point() + 
  geom_smooth(method = 'lm', se = F, formula = y~x) +
  theme_bw() + 
  facet_wrap(~name)
```

## Next steps

This concludes our workshop on using EBASE to estimate ecosystem metabolism.  You should now have a baseline understanding of how these tools can be used to gain insights into ecosystem properties and the factors that may be influencing them. Please follow up with the instructor if you have additional questions or would like to explore more advanced topics.